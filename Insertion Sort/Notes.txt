âœ…Insertion Sort:
Insertion Sort is a simple sorting algorithm that works similar to sorting playing cards in your hands.
It builds the final sorted array one item at a time, by picking an element and inserting it into its correct position among the previously sorted elements.

ðŸ“ŒKey Points:
Works in-place (no extra space needed).
Best case (already sorted): O(n)
Worst case (reverse sorted): O(nÂ²)
Stable algorithm (doesnâ€™t change the relative order of equal elements).
Good for small datasets or nearly sorted arrays.

âš¡Algorithm Steps:
Start from the second element (index 1).
Compare it with elements before it.
Shift all larger elements to the right.
Insert the element into the correct position.
Repeat for all elements.

âŒ›Time & Space Complexity:
Best Case (Already Sorted): O(n)
Average Case: O(nÂ²)
Worst Case (Reverse Order): O(nÂ²)
Space Complexity: O(1) (in-place sorting)

ðŸ§ Example:
public class InsertionSort {
    public static void insertionSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int key = arr[i];   
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }
    public static void main(String[] args) {
        int[] arr = {9, 5, 1, 4, 3};
        insertionSort(arr);

        System.out.print("Sorted Array: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
//Output:
{1,3,4,5,9}
