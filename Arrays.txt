âœ… 1. Arrays in Java â€” Core Concepts
Definition
An array in Java is a fixed-size, ordered collection of elements of the same data type stored in contiguous memory.
ðŸ§ Syntax:
// Declaration
int[] arr;
int arr2[];

// Initialization
arr = new int[5]; // default values: 0
int[] arr3 = {1, 2, 3, 4, 5};


âœ…Types of Arrays
Single-dimensional:
int[] nums = {1, 2, 3};

Multi-dimensional (Matrix):
int[][] matrix = {{1, 2}, {3, 4}};

ðŸ§ Example:
import java.util.Arrays;
public class ArrayExample {
    public static void main(String[] args) {
        // 1. Single-dimensional array
        int[] nums = {1, 2, 3};
        System.out.println("Single-dimensional array elements:");
        for (int i = 0; i < nums.length; i++) {
            System.out.println("Element at index " + i + ": " + nums[i]);
        }
        // 2. Multi-dimensional array (Matrix)
        int[][] matrix = {
            {1, 2},
            {3, 4}
        };
        System.out.println("\nMulti-dimensional array elements:");
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println(); // move to next row
        }
        // 3. Using Arrays.deepToString() for quick print
        System.out.println("\nMatrix using Arrays.deepToString(): " + Arrays.deepToString(matrix));
    }
}



âœ…2. Array Operations:

ðŸ§ Example:
// ArrayTraversalExample.java
public class ArrayTraversalExample {
    public static void main(String[] args) {
        
        // Step 1: Declare and initialize an array
        int[] arr = {10, 20, 30, 40, 50};

        System.out.println("Array Traversal using For Loop:");
        
        // Step 2: Traversal using for loop
        for (int i = 0; i < arr.length; i++) {
            System.out.println("Element at index " + i + ": " + arr[i]);
        }

        System.out.println("\nArray Traversal using Enhanced For Loop:");
        
        // Step 3: Traversal using enhanced for loop
        for (int value : arr) {
            System.out.println("Value: " + value);
        }
    }
}

Sample Output
Array Traversal using For Loop:
Element at index 0: 10
Element at index 1: 20


âœ…In Java, a dynamic array is an array whose size can grow or shrink during runtime.
A normal array has a fixed size once created, but dynamic arrays are implemented using classes like ArrayList in Javaâ€™s Collections Framework.
Why use Dynamic Arrays?
You donâ€™t need to know the size in advance.
They automatically resize when they run out of space.
Provide built-in methods for adding, removing, and searching elements.

ðŸ§ Example:
import java.util.ArrayList;
public class DynamicArrayExample {
    public static void main(String[] args) {
        ArrayList<Integer> numbers = new ArrayList<>();         // Create a dynamic array
        numbers.add(10);
        numbers.add(20);
        numbers.add(30);
        System.out.println( numbers);
        numbers.add(1, 15);                                           // insert 15 at index 1
        System.out.println( numbers);                                 
        numbers.set(2, 25);                                           // replace element at index 2 with 25     
        System.out.println( numbers);
        numbers.remove(3);                                            // remove element at index 3
        System.out.println( numbers);
                                                                      // Searching for an element
        int index = numbers.indexOf(25);
        if (index != -1) {
            System.out.println("Element 25 found at index: " + index);
        } else {
            System.out.println("Element not found");
        }
    }
}
After adding: [10, 20, 30]
After inserting at index 1: [10, 15, 20, 30]
After updating index 2: [10, 15, 25, 30]
After removing index 3: [10, 15, 25]
Element 25 found at index: 2
Traversing: 10 15 25


âœ…Arrays Functions:
1.Sorting:
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {5, 2, 9, 1};

        Arrays.sort(arr); // Ascending
        System.out.println("Ascending: " + Arrays.toString(arr));

        // Descending (Need Integer array for reverse order)
        Integer[] arr2 = {5, 2, 9, 1};
        Arrays.sort(arr2, java.util.Collections.reverseOrder());
        System.out.println("Descending: " + Arrays.toString(arr2));
    }
}

















